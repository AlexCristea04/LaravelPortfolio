{"ast":null,"code":"import React,{useEffect,useState}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[message,setMessage]=useState('');// State to store the message\nconst[loading,setLoading]=useState(true);// State to handle loading state\nconst[error,setError]=useState(null);// State to handle errors\nuseEffect(()=>{// Fetch the data from the backend API\nfetch('http://127.0.0.1:8000/api/test').then(response=>{if(!response.ok){throw new Error('Network response was not ok');}return response.json();// Parse the JSON data\n}).then(data=>{setMessage(data.message);// Assuming the response has a 'message' property\nsetLoading(false);// Set loading to false once data is fetched\n}).catch(error=>{setError(error);// Set the error state if something goes wrong\nsetLoading(false);// Set loading to false if an error occurs\n});},[]);// Empty dependency array means this effect runs once on component mount\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Backend Message\"}),loading&&/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"}),error&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Error: \",error.message]}),!loading&&!error&&/*#__PURE__*/_jsx(\"p\",{children:message})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","jsx","_jsx","jsxs","_jsxs","App","message","setMessage","loading","setLoading","error","setError","fetch","then","response","ok","Error","json","data","catch","children"],"sources":["C:/Users/justi/Desktop/Portfolio/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n  const [message, setMessage] = useState('');  // State to store the message\n  const [loading, setLoading] = useState(true); // State to handle loading state\n  const [error, setError] = useState(null); // State to handle errors\n\n  useEffect(() => {\n    // Fetch the data from the backend API\n    fetch('http://127.0.0.1:8000/api/test')\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json(); // Parse the JSON data\n      })\n      .then((data) => {\n        setMessage(data.message); // Assuming the response has a 'message' property\n        setLoading(false); // Set loading to false once data is fetched\n      })\n      .catch((error) => {\n        setError(error); // Set the error state if something goes wrong\n        setLoading(false); // Set loading to false if an error occurs\n      });\n  }, []); // Empty dependency array means this effect runs once on component mount\n\n  return (\n    <div>\n      <h1>Backend Message</h1>\n      {loading && <p>Loading...</p>}\n      {error && <p>Error: {error.message}</p>}\n      {!loading && !error && <p>{message}</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEnD,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGP,QAAQ,CAAC,EAAE,CAAC,CAAG;AAC7C,KAAM,CAACQ,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,IAAI,CAAC,CAAE;AAC9C,KAAM,CAACU,KAAK,CAAEC,QAAQ,CAAC,CAAGX,QAAQ,CAAC,IAAI,CAAC,CAAE;AAE1CD,SAAS,CAAC,IAAM,CACd;AACAa,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAAEC,QAAQ,EAAK,CAClB,GAAI,CAACA,QAAQ,CAACC,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAChD,CACA,MAAO,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAE;AAC1B,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,EAAK,CACdX,UAAU,CAACW,IAAI,CAACZ,OAAO,CAAC,CAAE;AAC1BG,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CAAC,CAAC,CACDU,KAAK,CAAET,KAAK,EAAK,CAChBC,QAAQ,CAACD,KAAK,CAAC,CAAE;AACjBD,UAAU,CAAC,KAAK,CAAC,CAAE;AACrB,CAAC,CAAC,CACN,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,mBACEL,KAAA,QAAAgB,QAAA,eACElB,IAAA,OAAAkB,QAAA,CAAI,iBAAe,CAAI,CAAC,CACvBZ,OAAO,eAAIN,IAAA,MAAAkB,QAAA,CAAG,YAAU,CAAG,CAAC,CAC5BV,KAAK,eAAIN,KAAA,MAAAgB,QAAA,EAAG,SAAO,CAACV,KAAK,CAACJ,OAAO,EAAI,CAAC,CACtC,CAACE,OAAO,EAAI,CAACE,KAAK,eAAIR,IAAA,MAAAkB,QAAA,CAAId,OAAO,CAAI,CAAC,EACpC,CAAC,CAEV,CAEA,cAAe,CAAAD,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}