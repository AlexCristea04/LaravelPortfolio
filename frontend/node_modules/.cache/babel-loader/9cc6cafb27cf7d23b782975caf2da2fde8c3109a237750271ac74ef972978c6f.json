{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\justi\\\\Desktop\\\\Portfolio\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [message, setMessage] = useState(''); // State to store the message\n  const [loading, setLoading] = useState(true); // State to handle loading state\n  const [error, setError] = useState(null); // State to handle errors\n\n  useEffect(() => {\n    // Fetch the data from the backend API\n    fetch('http://localhost:8000/api/test').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json(); // Parse the JSON data\n    }).then(data => {\n      setMessage(data.message); // Assuming the response has a 'message' property\n      setLoading(false); // Set loading to false once data is fetched\n    }).catch(error => {\n      setError(error); // Set the error state if something goes wrong\n      setLoading(false); // Set loading to false if an error occurs\n    });\n  }, []); // Empty dependency array means this effect runs once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Backend Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this), !loading && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zy53qzXqRWtSwcb8TAwYhue4KM4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","message","setMessage","loading","setLoading","error","setError","fetch","then","response","ok","Error","json","data","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/justi/Desktop/Portfolio/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n  const [message, setMessage] = useState('');  // State to store the message\n  const [loading, setLoading] = useState(true); // State to handle loading state\n  const [error, setError] = useState(null); // State to handle errors\n\n  useEffect(() => {\n    // Fetch the data from the backend API\n    fetch('http://localhost:8000/api/test')\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json(); // Parse the JSON data\n      })\n      .then((data) => {\n        setMessage(data.message); // Assuming the response has a 'message' property\n        setLoading(false); // Set loading to false once data is fetched\n      })\n      .catch((error) => {\n        setError(error); // Set the error state if something goes wrong\n        setLoading(false); // Set loading to false if an error occurs\n      });\n  }, []); // Empty dependency array means this effect runs once on component mount\n\n  return (\n    <div>\n      <h1>Backend Message</h1>\n      {loading && <p>Loading...</p>}\n      {error && <p>Error: {error.message}</p>}\n      {!loading && !error && <p>{message}</p>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EAC7C,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1CD,SAAS,CAAC,MAAM;IACd;IACAY,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAAEC,QAAQ,IAAK;MAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;MACdX,UAAU,CAACW,IAAI,CAACZ,OAAO,CAAC,CAAC,CAAC;MAC1BG,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC,CACDU,KAAK,CAAET,KAAK,IAAK;MAChBC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC;MACjBD,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEN,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAAiB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACvBhB,OAAO,iBAAIL,OAAA;MAAAiB,QAAA,EAAG;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAC5Bd,KAAK,iBAAIP,OAAA;MAAAiB,QAAA,GAAG,SAAO,EAACV,KAAK,CAACJ,OAAO;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtC,CAAChB,OAAO,IAAI,CAACE,KAAK,iBAAIP,OAAA;MAAAiB,QAAA,EAAId;IAAO;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV;AAACnB,EAAA,CAhCQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAkCZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}